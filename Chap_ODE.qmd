--- 
title: "Ordinary Differential Equations and their application in Ecology"
author: "Am√©lie Cocchiara, Th√©o Laguilliez, Cl√©ment Monaury, Laura Martinez Anton, Anastasia Paupe"
date: "`r Sys.Date()`"
bibliography: references.bib
execute: 
  freeze: auto
output: 
  html_document:
   toc: true
   toc_float: true
editor: 
  markdown: 
    wrap: 72
---


```{r}
#Add packages
  df_print: paged


```{=html}
<style>
body {
text-align: justify}
</style>
```
```{r init, include=FALSE}
# Configure your session and load R packages
rm(list=ls()) # Properly clear workspace

# Install packages
pkg <- c("knitr", "ggplot2", "tidyverse", "draw", "devtools")
inst.pkg <- row.names(installed.packages())
pkg2inst <- pmatch(pkg, inst.pkg)
if (any(is.na(pkg2inst[1:4]))) install.packages(pkg[which(is.na(pkg2inst[1:4]))],
                                                repos = "http://cran.at.r-project.org")
# Load packages
library(knitr)
opts_chunk$set(echo = FALSE, comment = "", cache = TRUE, fig.align = "center")
library(ggplot2) # graph package
library(tidyverse)
library(draw) # To draw some shapes
library(devtools)
devtools::install_github("hadley/emo")
```

```{r, include = FALSE}
# Generation of the needed emoji
emo::ji("alien")
emo::ji("goat")
emo::ji("vomit")
emo::ji("silly")
emo::ji("sunglasses")
```

# Introduction & objectives

Welcome to you, young Master 1 student!

It's now been ?x?(= number of chapters before ours) chapters since you plunged into this adventure full of numbers, formulas and other mathematical oddities (ü§¢). At the moment, you're probably feeling a strong need for a change of orientation. I mean, we're doing ecology, not maths! And raising goats in Auvergne sounds pretty cool...kinds of...üêê

But don't give up! The first (really interesting üòú) chapter is right there in front of you!

Are you interested in population and epidemiological trends and dynamics? Would you like to be able to predict the future (and the past, no kidding) from the present?

Then this is the chapter for you! Work it as much as you can! You'll end up shining in modelling (and maybe even in society).

At the end, you'll be able to ...

# I. Dynamic systems

Let's start simply!

First of all, let's define the framework of the study (= cadre de l'√©tude).

We consider a dynamic system. Or in other words, a physical system whose state changes as a function of time. By "state", we mean "physical variables" such as a number of individuals, a position, a temperature, etc., which are functions of time (= which evolve over time).

For example, suppose you wanted to study the evolution over time of a population of aliens newly landed on Earth (yes, it's possible, I saw that in men in black üòé).

[Your system is]{.underline}: the Alien population.\
[The state of this population is]{.underline}: the number of individuals, noted 'üëΩ'.\
This state is a function of time (the number of individuals changes over time). We therefore note it: 'üëΩ(t)'.

So your aim is to study this system. But as you can imagine, you can't start from scratch! To study the evolution of such a system, you need to know:\
- **its initial state**: values of its characteristic variables at the initial time of the study (t=0).\
- **the processes underway in the biological system**: the way of gaining (i.e. birth, migration) and/or losing (i.e. mortality) individuals for example. Don't hesitate to draw the system on a piece of paper, to avoid getting lost (*Figure 1*)!\
- **the parameters associated with these processes**

Let's make it more concrete:

```{r, include=TRUE, fig.height=2.8, fig.width=5}
# Create a new drawing page and set the drawing settings
drawPage(width = 5, height = 5, units = "inches")

# Draw the different shapes of the system on the page
#     * The rectangle
drawBox(x = 2.5, y = 2.5, width = 1, height = 1)

#     * The mortality arrow 
drawLine(x = c(3, 4),
         y = c(2.5, 2.5))
drawLine(x = c(3.9, 4),
         y = c(2.4, 2.5))
drawLine(x = c(3.9, 4),
         y = c(2.6, 2.5))

#     * The migration arrow 
drawLine(x = c(1, 2),
         y = c(2.5, 2.5))
drawLine(x = c(1.9, 2),
         y = c(2.4, 2.5))
drawLine(x = c(1.9, 2),
         y = c(2.6, 2.5))

#     * The birth 'arrow' (its a circle) 
drawCircle(x = 2.5,
           y = 3.4,
           radius = 0.4)
drawLine(x = c(2.5, 2.6),
         y = c(3, 3.1))
drawLine(x = c(2.5, 2.6),
         y = c(3, 2.9))

# Add the text
#     * For the population
drawText(x = 2.5, y = 2.5, text = "Population")
drawText(x = 2.5, y = 2.3, text = "üëΩ(t)")

#     * For the mortality
drawText(x = 4.45, y = 2.5, text = "Mortality")
drawText(x = 3.5, y = 2.35, text = "d üëΩ(t)")

#     * For the migration
drawText(x = 0.5, y = 2.5, text = "Migration")
drawText(x = 1.4, y = 2.35, text = "m")

#     * For the birth
drawText(x = 2.5, y = 3.4, text = "Birth")
drawText(x = 3.2, y = 3.4, text = "b üëΩ(t)")

# Add the caption
drawText(x = 2.5, y = 1.5, text = "Figure 1: Diagram of the 'Alien population' dynamic system")
```

To keep things simple, we'll take a discrete-time simulation, with a time step of 1.


Let define t like that: $$t \in \mathbb{N}^+$$ This means that t belongs to the set of natural integer numbers. t can therefore take the values 0, 1, 2, 3, 4, 5, etc..

Here, the variable of interest (= the state of the system) is the number of individuals in the population. This number changes over time, and is therefore denoted üëΩ(t). The biological processes responsible for this change over time are :\
- **mortality**: noted d (for death). düëΩ corresponds to the proportion of individuals that will die in 1 unit of time\
- **birth**: denoted b. This means that üëΩ individuals will produce büëΩ new individuals in 1 unit of time\
- **migration**: denoted m. This means that üëΩ increases by m individuals in 1 unit of time.

```{r, include=TRUE, fig.height=5, fig.width=6}
# Create a new drawing page and set the drawing settings
drawPage(width = 5, height = 4, units = "inches")

# Draw the orthogonal plan on the page
#     * The x axe 
drawLine(x = c(0.5, 4),
         y = c(0.5, 0.5),
         lineWidth = 2.5)
drawLine(x = c(3.9, 4),
         y = c(0.4, 0.5),
         lineWidth = 2.5)
drawLine(x = c(3.9, 4),
         y = c(0.6, 0.5),
         lineWidth = 2.5)
#     * The y axe 
drawLine(x = c(0.5, 0.5),
         y = c(0.5, 4),
         lineWidth = 2.5)
drawLine(x = c(0.4, 0.5),
         y = c(3.9, 4),
         lineWidth = 2.5)
drawLine(x = c(0.6, 0.5),
         y = c(3.9, 4),
         lineWidth = 2.5)

# Draw the 'discret' time lines
#     * The vertical one 
drawLine(x = c(2, 2),
         y = c(0.5, 2),
         lineWidth = 1)
#     * The horizontal one
drawLine(x = c(0.5, 2),
         y = c(2, 2),
         lineWidth = 1)

# Draw the 'continuous' time lines
#     * The vertical one 
drawLine(x = c(3, 3),
         y = c(0.5, 3),
         lineWidth = 1)
#     * The horizontal one 
drawLine(x = c(0.5, 3),
         y = c(3, 3),
         lineWidth = 1)

# Draw of the lines
drawCurve(x = c(1.5, 4.1),
          y = c(1, 3.5),
          angle = 80, # Angle of the curve
          open = T, # No link btw starting and ending points
          inflect = F, # No infection points
          curvature = -0.5,
          points = 5,
          square= F,
          squareShape = 0,
          lineWidth = 1.5)
drawLine(x = c(1, 3.7),
         y = c(1, 3.7),
         lineWidth = 1.5,
         lineColor = "blue")
drawLine(x = c(1, 3.7),
         y = c(1, 3.7),
         lineWidth = 1.5,
         lineColor = "blue")

# Add the text
drawText(x = 0.1, y = 4, text = "Number")
drawText(x = 0, y = 3.8, text = "of individuals")
drawText(x = 4.2, y = 0.4, text = "Time")
drawText(x = 3, y = 0.4, text = "(t+Œît)")
drawText(x = 2, y = 0.4, text = "(t)")
drawText(x = 0.1, y = 3, text = "üëΩ(t+Œît)")
drawText(x = 0.1, y = 2, text = "üëΩ(t)")



# Add the caption
drawText(x = 2.80, y = 0, text = "Figure 2: Schematic graphic representation of the growth")
drawText(x = 3.15, y = -0.2, text = "of a population over time")

```

$$\Delta$$ $$\int_a^b üëΩ(t) \, \mathrm dt$$

# II. Order 1 ODE & definition of ODE

# III. Order 2 ODE

# ODE 2 equations

An ordinary differential equation system with 2 equations represents the simultaneous rates of change of two related functions, where each equation typically involves the other one, expressing their mutual dependence.
  
ODE systems with 2 equations are widely used in different disciplines. We will only concentrate on the ecology field to not be overwhelmed by all the possibilities... and also because it's the most interesting one duh.  
  
In ecology, they are mainly used to model dynamics of populations interacting.  
Generally, if we want to quantify the effect of a species on another species... What easily comes to mind is that it all depends ob the population size and the "level" of competitivity of this species.  
  
You've surely already heard about Lotka-Volterra (LV) prey-predator model. You may not know this but it IS an ODE system with 2 equations ! **LV is the most known way to model the dynamic of predator-prey populations.**  
  
But Lotka-Volterra also has applications in microbiology (see https://journals.asm.org/doi/10.1128/aem.36.1.11-17.1978)  
  
  

## Lotka-Volterra  

A LV prey-predator model represents both equations over time. Although we will mostly focus on the cyclic patterns between those equations, keep in mind that there *can* be a certain point in time where both equations are in equilibrium and the values that are depending on the time remain approximately constant.  
  
  
**Why LV is useful:**
- To see that the interactions between populations can create periodic dynamics over time;  
- To study how biodiversity interacts with the parameters put into the model, such as the interaction coefficients between populations.  
  
  
**Assumptions for LV:**  
- The prey and predator live in a limited space;  
-	The encounters are random;  
-	The prey is only limited by the predator;  
-	A predator can consume an infinite number of preys  
  
  
**Biological intuition:**  
In this model, the predator population thrives when prey are plentiful, but eventually exhaust their resources and the population declines. When the predator population has declined sufficiently, the prey can reproduce more, and the population increases again. This dynamic continues in a cycle of growth and decline.


Typically, here's what these equations can look like :

$$ PP = \begin{cases} \frac{d_x}{d_t}= a x - b x y &\text{Prey} \\ \frac{d_y}{d_t}= -c y + h x y &\text{Predator} \end{cases}$$
**** voir avec Laura pour mettre autre chose que "d" en coefficient pour pas confondre avec les d√©riv√©es + voir aussi comment on s'accorde pour les signes

It's important to really understand how equations are constructed and what they do before getting started.  
Don't be afraid by the looks of all those letters, we'll gonna break it down to you quite simply:  
  
The main distinction to make in those equation is with ‚Äúx‚Äù and ‚Äúy‚Äù : make sure to recognize that ‚Äúx‚Äù is referring to the prey population (as written in the $$ \frac{d_x}{d_t} $$ at the beginning of the line) and that ‚Äúy‚Äù is referring to the predator population (as written in the $$ \frac{d_y}{d_t} $$ ).
*ax* : Growth term for the prey population: constant a * current prey population.
*bxy* : Death term for the prey population. Depends on the size of the prey population and the size of the predator‚Äôs population. The death of the prey population depends partly on the predator eating them.
It‚Äôs the same logic the other way around for the second equation because it includes the growth rate of the predator population with cy and the death rate of the predator population with hxy.

In other terms:
The prey grows at a linear rate (a) and gets eaten by the predator at the rate of (b). Indeed, the rate of predation on prey is assumed to be proportional to the frequency of encounters between predators and prey; it is equal to bx(t)y(t).  
The predator gains a certain amount of vitality by eating the prey at a rate (c), while dying off at another rate (d).  

More precisely, x(t) and y(t) functions follow a malthusian model:  
The prey population follows an exponential growth in the absence of predators. This growth is represented in the equation with the term ax(t).  
The term cy(t) is the natural death of the predators, it is an exponential decrease of the population, in absence of preys.  
 

### Demonstration

Let's dive into R, to simulate and plot the evolution of the two populations, using the Lotka-Volterra prey-predator model.  
To simulate this population dynamic, we will use given coefficients, initial levels of populations and also a given simulation time and given time step size. Indeed, We will use the so-called Euler method, as we will be moving through time, and incrementing new values of population levels at each time steps, to keep track of the evolution of the two populations.  

What you will have to keep in mind:
In this Euler method, we will think of $$dt$$ as $$\Delta t$$

Thus, we can make this approximation:
$$ \frac{d_x}{d_t} = ax - bxy \\ => dx = (ax - byx) * \Delta t \\ and \\ \frac{d_y}{d_t} = -cy + hxy \\ => dy = (-cy + hxy) * \Delta t $$


#### Defining the terms

Disclaimer: terms' values are not intended to be ecologically relevant, but to serve as an example.  

To make it more telling, let's say that our prey population is a zebra population, whereas the predator population are a group of lions. Obviously, we would think that the zebra population starts at a higher population size than a simple group of lions. That's what we tell to our model:
```{r}
rm(list=ls()) #to clear all the environment

X_init<- 10     #starting value for x
Y_init<- 4     #starting value for y
```

The initial values for the populations' sizes have been defined. Now, since LV is a dynamic model, evolving over time, and since we do not want our simulation to run endlessly, it'd be a good idea to set a time limit, wouldn't it be? Let's say we want to follow the population dynamics throughout 50 months.  
  
For our example, we will talk about numbers of individuals (Xinit=10 individuals, Yinit=4 individuals), and we will consider the time unit to be months. But we could have chosen days or years, and then chose consistent coefficient values:

```{r}
tend<-50    #how long the simulation is going to run for
delta_t<-0.01    #the size of the time step, as we will be moving through time with discrete steps

# Model coefficients
a<-1.1 #prey
b<-0.4 #prey
c<-0.1 #predator
h<-0.4 #predator
```


#### Defining the vectors

We create some vectors to keep track of the variables, as we are moving through time. Then those vectors will prove useful when we will want to plot the dynamics:

```{r}
X<-c(X_init)    #we will append to this vector, it is going to be filled up with the successive levels of X, during all the time of the simulation
Y<-c(Y_init)    #idem with Y

t<-c(0)   #this vector will be filled up with all the time steps
```

#### Simulation

```{r}
while (t[length(t)]<tend) 
{
  current_X<-X[length(X)]   #we define current_X as the most recent value of X
  current_Y<-Y[length(Y)]    #idem for Y
  current_t<-t[length(t)]
  
  delta_X<-(a*current_X-current_X*current_Y)*delta_t
  next_X<-current_X+delta_X
  
  delta_Y<-(c*current_X*current_Y-h*current_Y)*delta_t
  next_Y<-current_Y+delta_Y
  
  next_t<-current_t+delta_t
  
  #We append the successive values to the vectors
  X<-append(X,next_X)
  Y<-append(Y,next_Y)
  t<-append(t,next_t)

}
```
#### Plotting

```{r}
library(ggplot2)

LV <- data.frame(time = t, prey = X, predator = Y)

ggplot(LV, aes(x = time)) +
  geom_line(aes(y = prey, color = "Prey"), size = 1.5) +
  geom_line(aes(y = predator, color = "Predator"), size = 1.5) +
  labs(x = "Time (months)", y = "Number of Individuals") +
  scale_color_manual(values = c(Prey = "blue", Predator = "red")) +
  theme_classic()
```
You can see the cyclic nature of this dynamic as explained earlier: the prey thrives when the predator declines, the predator thrives when there's a lot of prey...  

This dynamic can be seen in a phase space plot i.e. the level of predator as a function of the prey level :

```{r}
ggplot(LV, aes(x = prey, y = predator)) +
  geom_point() +
  labs(x = "Prey (nb of individuals)", y = "Predator (nb of individuals)") +
  theme_classic()
```


### Adding a parameter to make in more realistic

At that point, the model doesn't contain a lot of terms. It is a great mathematical setting, we can understand how it works and what is it's point. However, in nature, there are a lot more parameters controlling our populations. Adding some of these parameters would allow the model to be more realistic.  
To cite only one parameter, we can talk about the carrying capacity of the environment. It defines how the environment can tolerate the species, according to the resources it contains. The more individuals from a species there is, the less the environment can keep up, until a certain point where there is too much individuals for a limited resource so the population declines...  
  
Actually, this notion of carrying capacity (K) can bring us to an unaddressed point: reaching an equilibrium for both prey and predator populations, instead of endlessly going in circles.

The equations become:
$$ PP = \begin{cases} \frac{d_x}{d_t}= a x \ (1 - \frac{N}{K}) - b x y &\text{Prey} \\ \frac{d_y}{d_t}= -c y + h x y &\text{Predator} \end{cases}$$


### Exercices to understand :

1. Supposing that you want to depict the possible seasonal variation of the coefficient "a", rewrite the code to simulate a model that includes the variability of "a" among time. We can consider a variation of "a" over a time period of one year, with an amplitude of 0.6. Moreover, we consider a mean value of "a" of 1.1. 

Answer:


```{r}
rm(list=ls())

####DEFINING THE COEFFICIENTS AND VARIABLES####
X_init<-10
Y_init<-4
tend<-50
delta_t<-0.01


####DEFINING THE VECTORS####
X<-c(X_init)   
Y<-c(Y_init)

t<-c(0)   #this vector will be filled up with all the time steps

###coefficients of the model
#function to describe the variation of a among time
a_seasonal_variation <- function(t) {
  amplitude <- 0.6  #amplitude of the seaonal variation
  period <- 12      #seasonal period
  mean <- 1.1     #mean value of the growth rate
  return(mean + amplitude * sin(2 * pi * t / period))
}

b<-0.4
c<-0.1
h<-0.4

####SIMULATION####

while (t[length(t)]<tend) 
{
  current_X<-X[length(X)]   #we define current_X as the most recent value of X
  current_Y<-Y[length(Y)]    #idem for Y
  current_t<-t[length(t)]
  
  delta_X<-(a_seasonal_variation(current_t)*current_X-current_X*current_Y)*delta_t
  next_X<-current_X+delta_X
  
  delta_Y<-(c*current_X*current_Y-h*current_Y)*delta_t
  next_Y<-current_Y+delta_Y
  
  next_t<-current_t+delta_t
  
  #We append the successive values to the vectors
  X<-append(X,next_X)
  Y<-append(Y,next_Y)
  t<-append(t,next_t)
  
}

####PLOTTING#####

library(ggplot2)

LV_exercice <- data.frame(time = t, prey = X, predator = Y)

ggplot(LV_exercice, aes(x = time)) +
  geom_line(aes(y = prey, color = "Prey"), size = 1.5) +
  geom_line(aes(y = predator, color = "Predator"), size = 1.5) +
  labs(x = "Time (months)", y = "Number of Individuals") +
  scale_color_manual(values = c(Prey = "blue", Predator = "red")) +
  theme_classic()


```



2. What factors, other than the carrying capacity of the environment, could be added that would have ecological significance ?

Answer:

- s«ù á…ê…π uo·¥â á…înpo…πd«ù…π …üo  é á·¥âl…êuos…ê«ùS
- «ù á…ê…π uo·¥â á…êp«ù…πd …üo  é á·¥âl…êuos…ê«ùS
- uo·¥â á…ê…π…ì·¥âÍüΩ
- uo·¥â á·¥â á«ùd…Øo…î …î·¥â…ü·¥â…î«ùds…ê…π áuI
- .…î á«ù

You can use a online generator to flip the text back up, or just take a picture and turn it !



# **IV. 3-equation system**

We will now make the system more complex by adding an additional
equation. To solve these systems, two methods are possible. If we are in
the case of a closed population then we can remove an equation: see
example SIR model. If we are in the case of an open population: see
example of the Lotka-Volterra model with 3 species.

## 1) SIR model and resolution by hand

The most used **models in epidemiology** are mathematical models of
infectious diseases such as the SIR model. These models are based on
compartmentalization that divide the population into various possible
disease states. The **SIR model** is composed of 3 compartments:
initially healthy or **susceptible individuals** (S), **infected
individuals** (I) and cured individuals or **resistent** (R).

$$SIR=\begin{cases}\frac{d_S}{d_t}=- \alpha SI-\gamma R &\text{Susceptible} \\ \frac{d_I}{d_t}=\alpha SI-\beta I&\text{Infected} \\ \frac{d_R}{d_t}=\beta I- \gamma R &\text{Resistent}\end{cases} 
\\
\\ \begin{align} With : & - \alpha \text{: disease transmission rate}
\\ & - \beta \text{: cure rate}
\\ & - \gamma \text{: coefficient of loss of immunity} \end{align}$$

We assume a **closed population**, so :
$$ S+I+R = 1 \Leftrightarrow R=1-S-I $$

Thus, we **can express R from S and I**, so we can remove the equation
from our system and we end up with a system with 2 equations.

### Balance points

We look for balance points such as:

$$ SIR=\begin{cases}\frac{d_S}{d_t}=0 &\text{Susceptible} \\ \frac{d_I}{d_t}=0&\text{Infected} \end{cases} $$

To do this, we solve :

$$ \begin{align} & \begin{cases} - \alpha SI-\gamma R = 0 &\text{Susceptible} \\ \alpha SI-\beta I =0 &\text{Infected} \end{cases}
\\ \Leftrightarrow & \begin{cases} \alpha SI-\gamma (1-S-I) = 0 \\ \alpha SI-\beta I =0 \end{cases} \end{align} $$

We first focus on solving:

$$\begin{align} & \alpha SI - \beta I=0
\\ \Leftrightarrow \ & I(\alpha S- \beta) =0 \\ \Leftrightarrow \ & I=0\ or\ S= \frac{\beta}{\alpha} \end{align}$$

**If *I = 0***, we integrate I=0 into our "susceptible" equation to
obtain the solution for S:

$$\begin{align} & \ \ \ \ \ \begin{cases} \alpha S *0 + \gamma (1-S-0)=0 \\ I=0 \end{cases} \\ & \Leftrightarrow \begin{cases} \gamma (1-S)=0 \\ I=O \end{cases} \\ &\text{We thus obtain our first solution:} \\ &\Leftrightarrow \begin{cases} S=1 \\ I=0 \end{cases} \end{align} $$

It's the **disease-free equilibrium** (DFE).

**If *S = b/a***, we integrate S into our "susceptible" equation to
obtain the solution for I:

$$
\begin{align} & \ \ \ \ \  \begin{cases} - \alpha \frac{\beta}{\alpha} I + \gamma (1- \frac{\beta}{\alpha} - I) =0
\\ S = \frac{\beta}{\alpha} \end{cases}
\\ & \Leftrightarrow \begin{cases} -\beta I + \gamma - \frac{\beta \gamma}{\alpha} -\gamma I = 0 \\ S = \frac{\beta}{\alpha} \end{cases}
\\ & \Leftrightarrow \begin{cases} \beta I + \gamma I = \gamma (1 - \frac{\beta}{\alpha}) \\ S= \frac{\beta}{\alpha} \end{cases}
\\ & \text{We thus obtain our first solution:}
\\ & \Leftrightarrow \begin{cases} I= \frac{\gamma (1- \frac{\beta}{\alpha})}{\beta + \gamma} \\ S=\frac{\beta}{\alpha} \end{cases} \end{align} 
$$

It's the **endemic equilibrium** (EE).

### Jacobian matrix

Now, let's perform linear stability analysis for each equilibrium point
by computing the Jacobian matrix :

$$ J=\begin{bmatrix} \frac{\delta S}{\delta S} & \frac{\delta S}{\delta I} \\ \frac{\delta I}{\delta S} & \frac{\delta I}{\delta I}  \end{bmatrix} \Leftrightarrow \begin{bmatrix} - \alpha I- \gamma & - \alpha S- \gamma \\ \alpha I & \alpha S- \beta \end{bmatrix} $$

Analyze the stability of each equilibrium point by examining the signs
of the real parts of the eigenvalues. If the real parts are all
negative, the equilibrium is stable; if any are positive, the
equilibrium is unstable. The stability will depend on the specific
values of the parameters **Œ±** and **Œ≤**.

### For the disease-free equilibrium :

$$ J(1,0)= \begin{bmatrix} -\gamma & - \alpha -\gamma \\ 0 & \alpha - \beta \end{bmatrix} $$

The Jacobian matrix for the pair (1,0) is an upper triangular matrix, so
the eigenvalues are the diagonal elements :
$$ \lambda _1 = - \gamma \ \text{and} \ \lambda _2 = \alpha - \beta $$

Œ≥ is a coefficient representing loss of immunity, so Œ≥\>0.

So : $$ \begin{align} & \lambda _1 <0 
\\ & \text{If:} \ - \alpha > \beta , \ \lambda _2 > 0 \ \text{Unstable equilibrium point}
\\& \ \ \ \  - \alpha < \beta , \ \lambda _2 < 0 \ \text{Asymptotically stable point}  \end{align} $$

In order to better understand the behavior of the unstable point, we
look for the sign of the determinant of the matrix:

$$ det(J(1,0))= - \gamma (\alpha - \beta ) \\
\Leftrightarrow \ \gamma (\beta - \alpha)
\\ \gamma > 0 \ and \ \alpha > \beta
\\ det(J(1,0)) < 0 \Rightarrow \text{Saddle point} $$

Saddle points exhibit a combination of stable and unstable behavior in
different directions in the state space.

### For the endemic equilibrium

$$ J(\frac{\beta}{\alpha},\frac{\gamma (1-\frac{\beta}{\alpha})}{\beta + \gamma})= \begin{bmatrix} \frac{\gamma (\beta- \alpha)}{\beta + \gamma} - \gamma & - \beta -\gamma \\ \frac{\gamma (\alpha - \beta)}{\beta + \gamma} & 0 \end{bmatrix} $$

Here, we do not have a characteristic matrix so to determine the
eigenvalues, it will be necessary to solve the characteristic
polynomial. We will first look at the sign of the determinant of the
matrix to study the behavior of the system.

So, we calculate the determinant :
$$\begin{align} & det(J(\frac{\beta}{\alpha},\frac{\gamma (1-\frac{\beta}{\alpha})}{\beta + \gamma})) = - (- \beta - \gamma) * \frac{\gamma (\alpha - \beta)}{\beta + \gamma} = \gamma (\alpha - \beta) \end{align}$$

If **Œ±** \< **Œ≤**, det(J) \< 0 : a saddle point.

If **Œ±** \> **Œ≤**, det(J) \> 0 : look the trace of the matrix.

$$Tr(J(S,I)) = \frac{\gamma (\beta - \alpha)}{\beta - \gamma} - \gamma
\\
\\ \gamma > 0 \ \text{and} \ \alpha > \beta
\\
\\ \text{So:} \ Tr(J(S,I)) <0 $$

In this case we have a stable point. The specific type of stability
depends on the signs and nature of the eigenvalues.

Now, we solve the characteristic polynomial to obtain the eigenvalues:

$$ det(J- \lambda Id) = 0
\\ \text{with Id : identity matrix}
\\
\\ \Leftrightarrow \begin{bmatrix} \frac{\gamma (\beta - \alpha)}{\beta + \gamma}-\gamma -\lambda 
& - \beta - \gamma
\\  \frac{\gamma (\alpha - \beta)}{\beta + \gamma} & - \lambda \end{bmatrix} = 0
\\ \Leftrightarrow - \lambda (
\frac{\gamma (\beta - \alpha)}{\beta + \gamma}-\gamma -\lambda) 
- (- \beta - \gamma )(
\frac{\gamma (\alpha - \beta)}{\beta + \gamma}
) = 0 
\\ \Leftrightarrow \lambda^2 + \lambda (\gamma +  \frac{\gamma (\alpha- \beta)}{\beta + \gamma})+ \gamma (\alpha - \beta) = 0 $$

The number of solutions is indicated by the value of the discriminant :
$$ \Delta = (\gamma +  \frac{\gamma (\alpha - \beta)}{\beta + \gamma})^2 - 4 (\gamma (\alpha - \beta))
\\ \text{With} \ \alpha > \beta
\\
\\
\begin {align} \text{If} \ & \Delta < 0:\ \text{you will have two complex conjugate roots.} \\ &\Delta = 0:\ \text{you will have one real repeated root.} \\ &\Delta>0: \ \text{you will have two distinct real roots.} \end{align} $$

From now,we will assign **numerical values**:
$$ \alpha = 4, \ \beta = 2 \ and \ \gamma = 1 
\\
\Delta = (1 + \frac{1(4-2)}{1+2})^2 - 4(1(4-2))= -5.22 
\\ So \ \Delta < 0 $$

$$ \text{Solutions are given by the following formula:}
\\ \lambda= \frac{-(\gamma + \frac{
\gamma (\alpha - \beta)}{\beta + \gamma}) \pm \sqrt \Delta}{2}i
\\ \frac{\sqrt \Delta}{2}i: \ \text{imaginary part.}
\\ \frac{-(\gamma + \frac{\gamma (\alpha - \beta)}{\beta +\gamma})}{2}: \ \text{real part.} 
\\
\\ \text{Real part}= -\frac{5}{3}$$

The stability of a linear system is often determined by the real parts
of the eigenvalues. In this case, the real part is negative which
indicates a **stable attractive node**.

This sounds complicated, **but don't panic** ! In ecology we are lucky
to have a great tool, R, which allows us to resolve this type of system.

## 2) Lotka-Volterra : A three-species model

Biotic interactions are complex, requiring the interaction of numerous
parameters. If we take the **Lotka-Volterra** example, it only considers
the **interactions between two species**, prey and predator. It assumes
a constant mortality rate among predators, regardless of prey. However,
**predators are themselves the prey of other super-predators**. Their
mortality rate should therefore depend on the super-predators they
encounter. Thus, the **prey-predator-superpredator** extension of the
Lotka-Volterra model would be a good representation of natural trophic
interactions.

In this case, we considerer a **superpredator**, a **predator** an a
**prey**.

A superpredator is an organism that reaches adulthood at the top of the
food chain. Thus, by definition, a superpredator is not the prey of any
other species. The predator is consider to be in the middle of the food
chain and the prey at the bottom.

The model can be written as the following system of differential
equations:

$$ PPS=\begin{cases} \frac{d_x}{d_t}=ax-bxy &\text{Prey} \\ \frac{d_y}{d_t}=-cy+dxy-eyz&\text{Predator} \\ \frac{d_z}{d_t}=-fz+gyz &\text{Superpredator} \end{cases} $$

The model parameters are :

-   *a* : *x* natural growth rate

-   *-f* and *-c* : natural death rate of *y* and *z*

-   The growth rate of *y* and *z* depends on the number of prey caught.
    It is modeled by *dxy* for *y* and by *gyz* for *z*.

-   The death rate of *x* and *y* depends on the number of top predators
    *y* for *x* and *z* for *y* . It is modeled by *-bxy* for *x* and by
    *-eyz* for *y*.

This model is only useful for chains of predators. It doesn't take into
account the presence of several predators with different dynamics on the
same prey.

Let's try to solve this system: To do this, the first step is to find
the balance of the model, that is to say the values (x,y,z) so that:

$$\frac{d_x}{d_t}=\frac{d_y}{d_t}=\frac{d_z}{d_t}=0$$

We take our previous systems that we factored:

$$ PPS=\begin{cases}\frac{d_x}{d_t}=x(a-by) &\text{Prey} \\ \frac{d_y}{d_t}=y(dxy-c-ez)&\text{Predator} \\ \frac{d_z}{d_t}=z(gy-f) &\text{Superpredator}\end{cases} $$

The obvious solution is (0,0,0) but is not the only one. Indeed, for the
derivatives to be equal to 0, then we must find the following solution:

$$(a-by)=(gy-f)=(dx-c-ez)=0$$

We first solve :
$$a-by=0\Leftrightarrow a=by \Leftrightarrow y=\frac{a}{b}$$
$$gy-f=0\Leftrightarrow f=by \Leftrightarrow y=\frac{f}{g}$$

So, a solution for a yeq is: $$y_{eq}=\frac{a}{b}=\frac{f}{g}$$
Therefore, there is an equilibrium when : $$ga=fb$$

In order to determine the other solutions, we must solve the following
jacobian matrix :
$$ J=\begin{bmatrix}a-by&-bx&0\\dy&-c+dx-ez&-ey\\0&gz&gy-f\end{bmatrix}$$

The steps are the same as for the SIR model but here the matrix is 3x3.
We invite you to look at the chapter on matrix calculation to determine
the solutions.

## 3) Generalizations of the three-species model and other examples

### a) Generalizations of the three-species model

The three-species model presented previously is a **simplified model**
that models a perfectly linear trophic chain. However, nature is more
complex and a species can be preyed upon by multiple predators and
predators can predate multiple prey items.

We invite you to go see the course of Lalith Devireddy (2016) entitled
"Extending the Lotka-Volterra Equations" which develops this model and
its resolutions.

Many models with 3-ODE systems exist to model ecological dynamics. Here
we will present two additional ones to you but we will not develop their
resolution.

### b) NPZ model

The NPZ model makes it possible to **model the lake production of a
pelagic ecosystem**. This model studies variations in nutrients,
phytoplankton and zooplankton that are linked to each other.

Here are the equations of the system, but it will not be worked up here.
$$
\begin{align} & NPZ = \begin{cases} \frac{dP}{dt}= \frac{V_m N}{k_s + N}P -mP -ZR_m(1-e^{-\Lambda P}) & \text{Pythoplankton}
\\ \frac{dZ}{dt}= \gamma ZR_m(1-e^{- \Lambda P}-dZ) & \text{Zooplakton}
\\ \frac{dN}{dt}=-\frac{V_m N}{k_s + N}P+mP+dZ+(1- \gamma ) ZR_m (1-e^{- \Lambda P}) & \text{Nutrients} \end{cases}
\\ 
\\ & \text{Definitions of variable:}
\\ & - V_m: \ \text{Maximum phytoplankton growth rate}
\\ & - N: \ \text{Nutrient concentration}
\\ & - k_s: \ \text{Half saturation constant for nutrients}
\\ & - P: \ \text{Phytoplankton stock size}
\\ & -m: \ \text{Phytoplankton mortality rate}
\\ & -Z: \ \text{Zooplankton stock size}
\\ & - \gamma : \ \text{Zooplankton growth efficiency}
\\ & - R_m : \ \text{Maximum zooplankton ration}
\\ & - \Lambda : \ \text{Ivlev constant}
\\ & -d: \ \text{mortality rate} \end{align} $$



# Conclusion & motivation words!


