---
title: "Ordinary Differential Equations and their application in Ecology"
author: "Amélie Cocchiara, Théo Laguilliez, Clément Monaury, Laura Martinez Anton, Anastasia Paupe"
date: "`r Sys.Date()`"
bibliography: references.bib
execute: 
  freeze: auto
output: 
  html_document:
   toc: true
   toc_float: true
  df_print: paged
---

```{=html}
<style>
body {
text-align: justify}
</style>
```
```{r init, include=FALSE}
# Configure your session and load R packages
rm(list=ls()) # Properly clear workspace

# Install packages
pkg <- c("knitr", "ggplot2", "tidyverse", "draw", "devtools")
inst.pkg <- row.names(installed.packages())
pkg2inst <- pmatch(pkg, inst.pkg)
if (any(is.na(pkg2inst[1:4]))) install.packages(pkg[which(is.na(pkg2inst[1:4]))],
                                                repos = "http://cran.at.r-project.org")
# Load packages
library(knitr)
opts_chunk$set(echo = FALSE, comment = "", cache = TRUE, fig.align = "center")
library(ggplot2) # graph package
library(tidyverse)
library(draw) # To draw some shapes
library(devtools)
devtools::install_github("hadley/emo")
```

```{r, include = FALSE}
# Generation of the needed emoji
emo::ji("alien")
emo::ji("goat")
emo::ji("vomit")
emo::ji("silly")
emo::ji("sunglasses")
```

# Introduction & objectives

Welcome to you, young Master 1 student!

It's now been ?x?(= number of chapters before ours) chapters since you plunged into this adventure full of numbers, formulas and other mathematical oddities (🤢). At the moment, you're probably feeling a strong need for a change of orientation. I mean, we're doing ecology, not maths! And raising goats in Auvergne sounds pretty cool...kinds of...🐐

But don't give up! The first (really interesting 😜) chapter is right there in front of you!

Are you interested in population and epidemiological trends and dynamics? Would you like to be able to predict the future (and the past, no kidding) from the present?

Then this is the chapter for you! Work it as much as you can! You'll end up shining in modelling (and maybe even in society).

At the end, you'll:\
- know how to define an ordinary differential equation\
- be able to detect a problem involving the need to use differential equations\
- be able to carry out modelling involving an ODE system in an ecological context

# I. Dynamic systems & ODE definition

Let's start simply!

First of all, let's define the framework of the study (= cadre de l'étude).

We consider a dynamic system. Or in other words, a physical system whose state changes as a function of time. By "state", we mean "physical variables" such as a number of individuals, a position, a temperature, etc., which are functions of time (= which evolve over time).

For example, suppose you wanted to study the evolution over time of a population of aliens newly landed on Earth (yes, it's possible, I saw that in men in black 😎).

[Your system is]{.underline}: the Alien population.\
[The state of this population is]{.underline}: the number of individuals, noted '👽'.\
This state is a function of time (the number of individuals changes over time). We therefore note it: '👽(t)'.

So your aim is to study this system. But as you can imagine, you can't start from scratch! To study the evolution of such a system, you need to know:\
- **its initial state**: values of its characteristic variables at the initial time of the study (t=0).\
- **the processes underway in the biological system**: the way of gaining (i.e. birth, migration) and/or losing (i.e. mortality) individuals for example. Don't hesitate to draw the system on a piece of paper, to avoid getting lost (*Figure 1*)!\
- **the parameters associated with these processes**

Let's make it more concrete:

```{r, include=TRUE, fig.height=2.8, fig.width=5}
# Create a new drawing page and set the drawing settings
drawPage(width = 5, height = 5, units = "inches")

# Draw the different shapes of the system on the page
#     * The rectangle
drawBox(x = 2.5, y = 2.5, width = 1, height = 1)

#     * The mortality arrow 
drawLine(x = c(3, 4),
         y = c(2.5, 2.5))
drawLine(x = c(3.9, 4),
         y = c(2.4, 2.5))
drawLine(x = c(3.9, 4),
         y = c(2.6, 2.5))

#     * The migration arrow 
drawLine(x = c(1, 2),
         y = c(2.5, 2.5))
drawLine(x = c(1.9, 2),
         y = c(2.4, 2.5))
drawLine(x = c(1.9, 2),
         y = c(2.6, 2.5))

#     * The birth 'arrow' (its a circle) 
drawCircle(x = 2.5,
           y = 3.4,
           radius = 0.4)
drawLine(x = c(2.5, 2.6),
         y = c(3, 3.1))
drawLine(x = c(2.5, 2.6),
         y = c(3, 2.9))

# Add the text
#     * For the population
drawText(x = 2.5, y = 2.5, text = "Population")
drawText(x = 2.5, y = 2.3, text = "👽(t)")

#     * For the mortality
drawText(x = 4.45, y = 2.5, text = "Mortality")
drawText(x = 3.5, y = 2.35, text = "d 👽(t)")

#     * For the migration
drawText(x = 0.5, y = 2.5, text = "Migration")
drawText(x = 1.4, y = 2.35, text = "m")

#     * For the birth
drawText(x = 2.5, y = 3.4, text = "Birth")
drawText(x = 3.2, y = 3.4, text = "b 👽(t)")

# Add the caption
drawText(x = 2.5, y = 1.5, text = "Figure 1: Diagram of the 'Alien population' dynamic system")

```

To keep things simple, we'll take a discrete-time simulation, with a time step of 1.

Let define t like that: $$t \in \mathbb{N}^+$$ This means that t belongs to the set of natural integer numbers. t can therefore take the values 0, 1, 2, 3, 4, 5, etc..

Here, the variable of interest (= the state of the system) is the number of individuals in the population. This number changes over time, and is therefore denoted 👽(t). The biological processes responsible for this change over time are :\
- **mortality**: noted d (for death). d👽 corresponds to the proportion of individuals that will die in 1 unit of time\
- **birth**: denoted b. This means that 👽 individuals will produce b👽 new individuals in 1 unit of time\
- **migration**: denoted m. This means that 👽 increases by m individuals in 1 unit of time.

Let's try to predict step by step the number of individuals at time (t+1), based on the information known at time (t).

What will the number of individuals at time (t+1) depend on?

Firstly, it depends on the number of individuals at time (t)!

We then note: 👽(t+1) = 👽(t)

But defined in this way, our population is constant. It doesn't change at all over time.

How can the population increase? - Through migration - Through births

We then note: 👽(t+1) = 👽(t) + migrations + births

But at each time step, the population is also subject to mortality (which obviously reduces the number of individuals).

We then note: 👽(t+1) = 👽(t) + migrations + births - mortality

Let's replace these words with their notations: 👽(t+1) = 👽(t) + m + b👽(t) - d👽(t)

Now, with parameter values and initial values, you can predict what will happen in the population at time (t+1). Great!

Now a question: is time discrete or continuous? Continuous, yes! In reality, the values of t are defined as follows: $$t \in \mathbb{R}^+$$.

We could take the problem from the beginning ... or start again from what we have already done, this time integrating the continuous dimension of time.

So we start from: 👽(t+1) = 👽(t) + m + b👽(t) - d👽(t)

We know what happens at each time step of 1. What we don't know is what happens between each of these time steps! Before working with continuous time, we'll try to work with a time step of less than 1.

The time step between each time step of 1 is noted: $$\Delta t < 1$$

We then incorporate this new time step into our formula: $$\begin{aligned}[t]
        & \phantom{=}\left(👽(t+1) = 👽(t) + m + b👽(t) - d👽(t) \right)\\
        & \Leftrightarrow 👽(t+\Delta t)= 👽(t) + m\Delta t + b\Delta t👽(t) - d\Delta t👽(t) \\
        & \Leftrightarrow 👽(t+\Delta t) -👽(t) = m\Delta t + b\Delta t👽(t) - d\Delta t👽(t) \\
        & \Leftrightarrow \frac{👽(t+\Delta t) -👽(t)}{\Delta t} = m + b👽(t) - d👽(t) \\
        \end{aligned}$$

Great! Now, what do you have to do to really work in continuous time, and not just be interested in a very small time step?

We need to be interested in a Δt of zero (or very close to 0).

This gives us: $$\lim_{\Delta t \to 0} \frac{👽(t+\Delta t) -👽(t)}{\Delta t} = \frac{d👽}{dt} = 👽'(t) $$

Graphically, this gives (*Figure 2*):

```{r, include=TRUE, fig.height=5, fig.width=6}
# Create a new drawing page and set the drawing settings
drawPage(width = 5, height = 4, units = "inches")

# Draw the orthogonal plan on the page
#     * The x axe 
drawLine(x = c(0.5, 4),
         y = c(0.5, 0.5),
         lineWidth = 2.5)
drawLine(x = c(3.9, 4),
         y = c(0.4, 0.5),
         lineWidth = 2.5)
drawLine(x = c(3.9, 4),
         y = c(0.6, 0.5),
         lineWidth = 2.5)
#     * The y axe 
drawLine(x = c(0.5, 0.5),
         y = c(0.5, 4),
         lineWidth = 2.5)
drawLine(x = c(0.4, 0.5),
         y = c(3.9, 4),
         lineWidth = 2.5)
drawLine(x = c(0.6, 0.5),
         y = c(3.9, 4),
         lineWidth = 2.5)

# Draw the 'discret' time lines
#     * The vertical one 
drawLine(x = c(1.7, 1.7),
         y = c(0.5, 2),
         lineWidth = 1)
#     * The horizontal one
drawLine(x = c(0.5, 1.7),
         y = c(2, 2),
         lineWidth = 1)

# Draw the 'continuous' time lines
#     * The vertical one 
drawLine(x = c(2.35, 2.35),
         y = c(0.5, 3),
         lineWidth = 1)
#     * The horizontal one 
drawLine(x = c(0.5, 2.35),
         y = c(3, 3),
         lineWidth = 1)

# Draw of the lines
drawCurve(x = c(1.5, 4.1),
          y = c(1, 3.5),
          angle = 80, # Angle of the curve
          open = T, # No link btw starting and ending points
          inflect = F, # No infection points
          curvature = -0.5,
          points = 5,
          square= F,
          squareShape = 0,
          lineWidth = 1.5)
drawLine(x = c(1, 3.7),
         y = c(0.9234, 5.076),
         lineWidth = 1.5,
         lineColor = "blue")
drawLine(x = c(1.2, 3.7),
         y = c(0.9234, 6.276),
         lineWidth = 1.5,
         lineColor = "red")

# Add the text
drawText(x = 0.1, y = 4, text = "Number")
drawText(x = 0, y = 3.8, text = "of individuals")
drawText(x = 4.2, y = 0.4, text = "Time")
drawText(x = 2.35, y = 0.4, text = "(t+Δt)")
drawText(x = 1.7, y = 0.4, text = "(t)")
drawText(x = 0.1, y = 3, text = "👽(t+Δt)")
drawText(x = 0.1, y = 2, text = "👽(t)")

drawBox(x = 2.5, y = 4.3, width = 2, height = 0.5,
        fillColor = 'white', lineColor = 'white')

# Add the caption
drawText(x = 2.80, y = 0, text = "Figure 2: Schematic graphic representation of the growth")
drawText(x = 3.15, y = -0.2, text = "of a population over time")

```

The blue line is characterized by the slope: $$\frac{👽(t+\Delta t) -👽(t)}{dt}$$

The red line is characterized by the slope: $$\frac{d👽}{dt}$$

There are 3 behaviors to understand: $$\begin{aligned}[t]
        & \frac{d👽}{dt}>0\Leftrightarrow\text{👽is increasing around t} \\
        & \frac{d👽}{dt}=0\Leftrightarrow\text{👽 does not vary around t}\\
        & \frac{d👽}{dt}<0\Leftrightarrow\text{👽 is decreasing around t}\\
        \end{aligned}$$

This N'(t) thus represents an 'instantaneous' increase over time in the number of individuals in the Alien population.

And this is what we call a differential equation: $$N'(t) = \frac{d👽}{dt} = m + b👽(t) - d👽(t)$$ In other words, it is an equation that relates a variable (here, 👽(t)) to its derivatives (here, only d👽/dt). It describes the speed at which a variable (in this case 👽: the number of individuals in the Alien population) varies over time.

# II. Single ODE system: examples of exponential & logistic models

Let's explore two well-known models to better understand the ODE concept.

## II-A. The exponential model or Malthus model

The biological hypothesis behind this first model is as follows: The population grows in proportion to its present size.

Let r be defined as follows: $$r \in \mathbb{N}^+$$

This means that a population of N individuals at time t will gain r\*N individuals at the next time.

It could be illustrated as follows (*Figure 3*):

```{r, include=TRUE, fig.height=2.8, fig.width=5}
# Create a new drawing page and set the drawing settings
drawPage(width = 5, height = 5, units = "inches")

# Draw the different shapes of the system on the page
#     * The rectangle
drawBox(x = 2.5, y = 2.5, width = 1, height = 1)


#     * The r coefficient arrow 
drawLine(x = c(1, 2),
         y = c(2.5, 2.5))
drawLine(x = c(1.9, 2),
         y = c(2.4, 2.5))
drawLine(x = c(1.9, 2),
         y = c(2.6, 2.5))

# Add the text
#     * For the population
drawText(x = 2.5, y = 2.5, text = "N")

#     * For the r coefficient
drawText(x = 1.2, y = 2.65, text = "r * N")

# Add the caption
drawText(x = 2.5, y = 1.5, text = "Figure 3: The Malthus model dynamic system")

```

We're going to define a discrete and a continuous model here to make things very clear!

### II-A-1. Discrete model

Soit $$n \in \mathbb{N}^+$$

Comme dit plus haut, la population croit de r\*N(n) par unité de temps.

Cela signifie qu'entre N(n+1) et N(n), la population croit de r\*N(n).

On a donc: $$N(n+1)-N(n) = r*N(n)$$

Cela donne donc le modele suivant: $$N(n+1) = r*N(n)+N(n)$$

On va représenter graphiquement ce modèle en utilisant r studio.

```{r, include=TRUE, echo=TRUE}
time <- c(0, 30, 50, 70, 100, 130, 150, 170, 200, 230, 250, 300, 350, 370, 400, 430, 470)
individuals <- c(2, 3, 5, 10, 18, 25, 38, 50, 61, 79, 95, 115, 138, 142, 143, 143, 144)

plot(time, individuals)
```

### II-A-2. Continuous model

Soit t ...

On va essayer de simuler ce modèle en utilisant r studio. Nous allons utiliser un package que vous avez vu ou que vous verrez sans doute très prochainement: le package deSolve.

Installez le et chargez le:

```{r, include=TRUE, echo=FALSE}
install.packages("deSolve")
library(deSolve)
```

Il y a deux points importants à intégrer pour l'utilisation de ce package:

-   La fonction principale que vous utiliserez est la fonction '*ode()*'. Elle suit une syntaxe bien particulière qu'il vous faut retenir:

*ode(y=y0, times=temps, func=fonction, parms=paramètres)*

avec:

-   '*y0*' = valeur initiale de la variable d'intérêt y (pour la première valeur de temps)\

-   '*times*' = les temps sur lesquels vous souhaitez travailler\

-   '*fonction*' = la fonction définissant le système ; cette fonction suit une syntaxe bien particulière qu'il vous faudra aussi retenir (vois plus bas)\

-   '*parms*' = les valeurs de paramètres

-   concernant l'argument '*fonction*' de la fonction '*ode()*'. Celui-ci correspond à une fonction qui, bien que propre à chaque modèle, suit un syntaxe bien particulière, comme précisé plus haut. Cette syntaxe est la suivante:

*fonction \<- function(t,y,paramètres){* *instructions* *list(flux)}* avec:

-   '*t*' = correspond au temps de l'argument 'times' de la fonction ode()\
-   '*y*' = correspond à la variable d'intérêt\
-   '*paramètres*' = correspond au paramètres de l'argument 'parms' de la fonction ode()

Sachant tout cela, on peut simuler le modèle exponentiel avec le script suivant:

```{r, include=TRUE, echo=TRUE}

expo <- function(t, N, r){
  list(r*N)}
N0 = 5
r = 0.2
temps <- seq(from = 0, to = 5, by = 0.02)
sol <- ode(y = N0, times = temps, func = expo, parms = r)
plot(sol,main = "Modèle exponentiel / Modèle de Malthus")
```

## II-B. The logistic model or Verhulst model

```{r, include=TRUE, echo=TRUE}
compet<-function(t,N,param){
r1=param[1]
r2=param[2]
c1=param[3]
c2=param[4]
N1=N[1]
N2=N[2]
list(c(r1*N1-c1*N1*N2,r2*N2-c2*N1*N2))
}
parametres <- c(r1=0.4,r2=0.6,c1=0.02,c2=0.015)
temps <- seq(from = 0, to = 5, by = 0.02)
N0 = c(10,20)
sol <- ode(y = N0, times = temps, func = compet, parms = parametres)
plot(sol,"Modèle compétition")
```

# III. Double ODE system: example of lotka-volterra model

# IV. Triple ODE system: example of ???

# Conclusion & motivation words!
