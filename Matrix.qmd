---
title: "Modèle matrice et applications en écologie"
execute: 
  freeze: auto
output: 
  html_document:
   toc: true
   toc_float: true
---
Sommaire :

I. Foundations of matric modelling in ecology
	A. Why using matric modelling in ecology
	B. Transform a population into a matrix
	C. How can we modify a simplified population matrix ?

III. Epidemiology matrices
	1. Introduction to epidemiology with the SIRS model
	2. Taking population dynamics and structure into account
	3. Setting up the model in R
	4. Visualizing results





I. Foundations of matrix modelling in ecology

	A. Why using matrix modelling in ecology ? 
	
Matrices are mathematical tools for modeling situations. Used in many fields, ecology is no exception . Matrices make it possible to represent populations and make them evolve according to different rules or events. 
The first uses of these models date back to 1941 by Harro Bernardelli which studied the oscillations of the structure of a population (Smith D. and Keyfitz N., 2012). Others use later matrices to represent populations, including Leslie in 1945 whose work marked a turning point in the use of matrices in ecology (Charles S., 2004). 
Subsequently, different models of matrix representation of populations were published and used in population dynamics.

The objective of a population matrix is, as we have already said, to represent the evolution of a population over time and its state at a particular time "t" for example, which will be represented as discreet in this chapter. 
This matrix is therefore based on population growth behaviours. Let’s recall the basics to better understand how population matrices were created :

In 1798, Malthus published his population growth model. If we consider N(t) as the population size at time t, and λ the rate of growth of this population, we can write that: 

$$
N(t+1) = λN(t)
$$
If we want to write this equation for the population in a distant future, we can find by recurrence that :

$$
N(t) = λ^tN(0)   
$$
with N(0) the population at the beginning of our study.

Depending on the sign of λ, our population will therefore increase or decrease over time (Hoppensteadt F.C., 1982).
However, this model is largely simplified. Why? It considers that all individuals are identical, whether by their reproductive capacity or their ability to survive. 
This means that in this model, an elderly individual can reproduce and survive just as well as a young and vigorous individual who has just reached sexual maturity ((Frisman E.Ya. et al., 2021).

But then, how can we solve this problem? In the wild, each individual is different, but we can predict his qualities according to the average of his species and his position in the population: by position, we mean his place in different categories expressed according to various criteria such as age (young, adult, old), sex (male, female), or many others. 
These categories are commonly referred to as “classes”. Several individuals of the same class will have the same characteristics from the point of view of the criterion used for this class, and therefore will have the same impacts on the dynamics of their population. For example, they will have the same fertility or the same survival rate. Thus, we can determine the contribution of each class to another class and thus ultimately to the population, and this according to the size of the first class. 

The size of a class "i" can thus be written:

$$
\begin{equation*}
n_i(t+1) = \sum_j (a_{ij} \cdot n_j(t))
\end{equation*}
$$ 

Where "a" is the contribution and a_ij the contribution of a class "j" to class "i" at time t+1.
We can then create a system considering all the classes, which can be translated into a matrix:

$$
\begin{equation}
N(t+1) = A \cdot N(t)
\end{equation}
$$  
$$
\begin{equation}
N(t) = A^t \cdot N(0)
\end{equation}
$$ 
Where A is what we call a population projection matrix, representing our population in a matrix form, according to its different characteristics (classes, class parameters, etc.). 
N(t) is a vector dependent on the number of individuals present in our population, and N(0) is our initial population vector, from which we will be able to make this population evolve over time.

Population dynamic is a concept that is sometimes difficult to study because it depends on many parameters. A population will vary in size and type of individuals through four main processes: 
- The birth of new individuals, depending on the fertility of those already present and their number; 
- mortality, which may depend on predation, disease or old age ; 
- immigration, the rates of which will depend on other populations, their distances from those studied and the dispersal capacity of individuals; 
- emigration, which will depend on the lifestyle of the species studied and its tendency to leave its original population.

 A matrix will allow to represent the population variation according to these four processes (Schaub M. and Abadi F., 2011 ; Abadi et al., 2010).

 (mettre ta figure)

These representations can be very complete, including differences in age, gender, genetic origin and other individuals. Indeed, not all individuals will have the same impact on their population dynamics. 
Too young or too old individuals do not participate in reproduction and therefore in the future increase of their group. The number of males will not have the same impact on the number of offspring as the females. 
Finally, individuals of different ages will not have the same mortality rates. Matrices are thus widely used in epidemiology, where they will allow to model the spread of the disease in a population according to the virulence and infectivity of the disease. They may also focus on the population’s response to the disease, depending on individual mortality rates and resilience.

It is important to know that modeling matrices have limitations. They are based in particular on hypotheses that will allow their correct analysis and the validity of their results. Thus, interactions between individuals are not taken into account, and do not affect the dynamics of their population. Then, the caracteristics of individuals of the same class are identical, regardless of the individual, and constant over time. Different caracteristics are only found in different classes.

By allowing to model as correctly as possible the evolution of a population over time, according to the maximum of parameters that can positively or negatively impact it, we can obtain many very interesting results. Thus, population matrices can allow us to improve species conservation and management. Depending on the dynamics of its population, we can know if the species is threatened in the future and/or impacted by events (example: impact of fire (Hoffmann W.A., 1999)). We can have a more global and real vision of how populations evolve in their environment. 
However, matrix models may not be always necessary. As for each study, it is important to ask ourselves the right questions, to think about the interest of this mode of analysis compared to others and its relevance for the question/ population studied.

B) Transform a population into a matrix

We were able to see what are the interests of making population matrices for our research. From now on, we will see together how to create these matrices.

The first thing to do before creating our matrix is to collect data. Scientists regularly conduct long-term monitoring and capture-recapture measurements to obtain maximum information on the population they wish to study. These processes also make it possible to know additional information such as the age of individuals and their gender for example.

It is necessary to know the different parameters that we will apply to our population dynamics. Thus, as we saw earlier, the population evolves according to four main concepts: births, deaths, immigration and emigration. 

In order to correctly model the population that we study, we must be able to express these phenomena in the matrix. For this, we need to know how many individuals die, are born, immigrate or emigrate. These numbers will depend of the species but also on the individuals already present in the population. 
To represent births, we must know the fertility rate of the females already present: in short, how many females, how many young on average, which females are able to reproduce and how many females will be fertilized. 
Then, to represent the death of individuals we must know the mortality (or survival) rate of individuals in this population. It will depend on the composition of our population such as the age of its individuals, the average lifespan of the species and the rates of predation or death by disease for example. 
In terms of immigration rates, they will depend (as mentioned earlier in the first part) on the presence and distance of other populations around and the faculty/tendency of dispersal of the species. 
Finally, emigration rates will be based similarly on the same things, and also depend on the individuals already present.

To have all these parameters, we must already know a minimum of things about the species/population studied. These information can be retrieved during the population study project or in the literature, depending on what we want to study. 

Obviously, depending on the question and the complexity of the study, these parameters may be more or less precise (for example, population of an invasive species with no predator, and therefore a mortality rate dependent on fewer factors).

Once all the parameters are known, we can formulate equations reflecting the evolution of the population according to these criteria. It is useful before making our matrix to realize a life cycle diagram of the studied population (Charles S., 2004).

To help you understand how matrix modeling of populations works, we will use an example more and more complex of a population matrix throughout our chapter.

We will take a population of meerkats as an example. Meerkats are a social species living in more or less numerous groups, with all kinds of individuals of different sex and age. They are also animals able to change groups by leaving theirs or by integrating a new one if the conditions oblige it. Finally, they are under pressure from different predators and potential diseases. Therefore, they will perfectly allow us to represent our population matrices with a maximum of criteria.

To start, we will begin with a very simplified situation:

A serious epidemic decimated the original colony of a meerkat family, forcing them to immigrate to find a new one. The family is healthy and does not have the disease. It is composed of a male and a female, as well as their two young, a young male and a young female. 
If we look for the lifestyle of meerkats in the literature, we obtain in particular that females have 2 to 5 young per year. They can have young from one year old.
In our example, we will consider an average of 3 cubs per year. In addition, individuals live on average 12 years (Réserve de Sigean, 2023). 
                                                                           
We can represent our small, simplified population in a basic matrix form. Thus:

$$     
begin{table}
  \centering
  \caption{Tableau Sexe et Âge}
  \begin{tabular}{|c|c|c|}
    \hline
    \multicolumn{2}{|c|}{Sexe\Age} & \\
    \hline
    & Adulte & Jeune \\
    \hline
    Mâle & M1 & M2 \\
    \hline
    Femelle & F1 & F2 \\
    \hline
  \end{tabular}
\end{table}
$$  

$$       
\begin{equation}   
  P_1 = \begin{bmatrix} M_1 & M_2 \\ F_1 & F_2 \end{bmatrix}  
\end{equation}    
$$      

In practice, it is rather rare to consider both sexes in population matrices. This is due to the greater complexity it would require to also consider gender interactions. For simplicity, the models are often based on females only (female-based model), mainly because of the importance of females for the number of descendants and the greater ease in calculating their number of descendants, compared to a male (Girel S., 2020 ; ) .

We will now see how to represent our population matrix on R, which will be our main tool in this chapter to manipulate and understand the dynamics of our population. To create a matrix similar to the one shown above, simply type this command:

matrix(nrow = number of rows desired , ncol = number of columns desired) thus in our case:

```{r}
matrix(nrow = 2, ncol = 2)
```

For now, this matrix is empty. If we wanted to fill it directly, we could also use a vector as information: 

```{r}
matrix(data = c(1, 1, 1, 1) , nrow = 2)
```
We could also make a matrix with our abbreviations if we wanted:

```{r}
matrix(data = c("M1 "  , "F1 " , "M2" , "F2 " ), nrow = 2)
```
Finally, we can create a matrix from a list, which can be very convenient if our data set, our population, is represented in this form. In our current case, our list would be very simple since we only have four values. But this makes it easier to write our matrix if our list is much longer.

```{r}
liste <- list(1, 1, 1, 1)    
#ou alors
liste2 <- list("M1 "  , "F1 " , "M2 " , "F2 " )
matrix <- matrix(data = liste, nrow = 2)
matrix
#ou
matrix2 <- matrix(data = liste2, nrow = 2)
matrix2

```
Here, our model represents a stable population, at the moment t. It does not allow us to observe its evolution for the moment. In order to use it in population dynamics, we will have to make it more complex.


C) How can we modify a simplified population matrix ?

Before making our matrix suitable for the study of population dynamics, we will start by seeing how simple matrix manipulations can allow us to modify the matrix representation of our population if the latter is modified. 
Let’s take our family of meerkats: during the journey, the young male is captured by a predator, which removes a member from the population and therefore changes the matrix. Similarly, later on, a lone male, lost, is welcomed by the family. Thus, our matrix will be successively modified in these ways: 

$$
\begin{equation}
  P_2 = \begin{bmatrix} M_1 & M_2 \\ F_1 & F_2 \end{bmatrix} - \begin{bmatrix} 0 & M_2 \\ 0 & 0 \end{bmatrix} = \begin{bmatrix} M_1-0 & M_2-M_2 \\ F_1-0 & F_2-0 \end{bmatrix} = \begin{bmatrix} M_1 & 0 \\ F_1 & F_2 \end{bmatrix}
\end{equation}
$$
$$
\begin{equation}
  P_3 = \begin{bmatrix} M_1 & 0 \\ F_1 & F_2 \end{bmatrix} + \begin{bmatrix} M_1 & 0 \\ 0 & 0 \end{bmatrix} = \begin{bmatrix} M_1+M_1 & 0 \\ F_1+0 & F_2+0 \end{bmatrix} = \begin{bmatrix} 2M_1 & 0 \\ F_1 & F_2 \end{bmatrix}
\end{equation}
$$
Thus, our final matrix represents our final population : two adult males, one young female and one adult female, with zero young males. The matrix does not represent each individual personally but the size of each group (adult male, adult female, young male, young female). It is important to remember that we can only add or subtract matrices with the same dimension.

Subsequently, our new family finally joined a large group of meerkats residing in the area. This colony has 30 individuals, whose composition is revealed in the following matrix:

$$
\begin{equation}
  P_n = \begin{bmatrix} 11M_1 & 3M_2 \\ 14F_1 & 2F_2 \end{bmatrix}
\end{equation}
$$

If we compile our two populations, we get our final population which is composed of 34 individuals:

$$
\begin{equation}
  P = \begin{bmatrix} 13M_1 & 3M_2 \\ 15F_1 & 3F_2 \end{bmatrix}
\end{equation}
$$

It is from this population that we will develop the rest of our chapter, which will explain how we can study the evolution of this group over time, according to different parameters. 

If we want to perform these calculations on R, the commands are quite simple. We have seen in the previous part how to create matrices on the software. If we want to compile them, just use the operation «+» or «-» as numbers. Of course, it is also necessary here to have matrices of the same dimension.

```{r}
P1 <- matrix(data = c(1, 1, 1, 1) , nrow = 2)
M <- matrix(data = c(1, 1, 0, 1) , nrow = 2)
P2 = P1 - M
P2

N <- matrix(data = c(1, 0, 0, 0) , nrow = 2)
P3 <- P2 + N
P3

Pn <- matrix(data = c(11, 14, 3, 2) , nrow = 2)
P = P3 + Pn
P



```
Subsequently, we will need to multiply our population matrix with other matrices in order to make it evolve over time. So we will take advantage of this chapter to show you now how to do this. Once again, we will start by reviewing the calculation rules of matrices, then their applications in R. First, to multiply two matrices, they do not have to have the same dimension, unlike addition and subtraction operations. However, the number of columns in the first matrix must be equal to the number of rows in the second. Indeed, the multiplication of the two matrices will be a cross of the columns of one with the rows of the other, so it is important to have an equivalent number between the two. Let’s take the example of Pn, with a lambda B matrix for the moment. We will see in the next chapter which matrix is useful to multiply in reality with our population matrix.

$$
\begin{equation}
  P_n \mathbf{B} = \mathbf{P'}\mathbf{B} = \begin{bmatrix} 11M_1 & 3M_2 \\ 14F_1 & 2F_2 \end{bmatrix} * \begin{bmatrix} a & c \\ b & d \end{bmatrix}
\end{equation}
$$

$$
\begin{equation}
  \mathbf{P'}\mathbf{B} = \begin{bmatrix} 11M_1 \ast a + 3M_2 \ast b & 11M_1 \ast c + 3M_2 \ast d \\ 14F_1 \ast a + 2F_2 \ast b & 14F_1 \ast c + 2F_2 \ast d \end{bmatrix}
\end{equation}
$$

As mentioned just before, matrices are not necessarily of the same dimension:

$$
\begin{equation}
  P_n \mathbf{N} = \mathbf{P'}\mathbf{N} = \begin{bmatrix} 11M_1 & 3M_2 \\ 14F_1 & 2F_2 \end{bmatrix} * \begin{bmatrix} a \\ b \end{bmatrix}
\end{equation}
$$

$$
\begin{equation}
  P_n \mathbf{N} = \begin{bmatrix} 11M_1 \ast a + 3M_2 \ast b \\ 14F_1 \ast a + 2F_2 \ast b \end{bmatrix}
\end{equation}
$$


It is important to note that most of the time, multiplications are not commutative: we do not get the same result by doing Pn x B as by doing B x Pn. The order of multiplication is important, on the contrary of the multiplication of numbers that can be reversed as desired.

$$
\begin{equation}
  \mathbf{B} \times P_n = \begin{bmatrix} a & c \\ b & d \end{bmatrix} \times \begin{bmatrix} 11M_1 & 3M_2 \\ 14F_1 & 2F_2 \end{bmatrix} = \begin{bmatrix} a \ast 11M_1 + c \ast 14F_1 & a \ast 3M_2 + c \ast 2F_2 \\ b \ast 11M_1 + d \ast 14F_1 & b \ast 3M_2 + d \ast 2F_2 \end{bmatrix}
\end{equation}
$$

Now that the matrix product calculations necessary for our future models are generally acquired, we will see how to perform them on R. If we simply want to multiply our matrix with a number, the sign “*” is enough:

$$
\begin{equation}
  P_m = 2 \times P_n
\end{equation}
$$

If we want to multiply several matrices together, we must add the symbol ‘%’ for each matrix, in addition to ‘*’. Thus:

```{r}
N <- matrix(data = c(2, 4) , nrow = 2)
Pf = Pn % * % N 

```


III. Epidemiology matrices

1. Introduction to epidemiology with the SIRS model


Epidemiology is the study of disease dynamics within a population.
Let's imagine that a sick meerkat arrives in a new, healthy colony after having had to leave its previous colony, which has been decimated by disease. The dynamics of the epidemic can be modeled using a basic epidemiological model, the SIRS model.

![The SIRS model](C:/Users\thill\Documents\M2 MODE\git\branche_Jeanne\MODE_reproduciblescience\.quarto\_freeze\Matrix\Schema_modele_SIRS.png "The SIRS model" )

In this model, susceptible individuals (S) become infected, and thus pass into the infectious class (I), then either leave the system by dying of the disease, or heal, and thus become cured/immune individuals (R). Finally, immunized individuals can lose their immunity and become susceptible again (S).

- trans is the transmission rate, so trans.S.I/N represents the number of individuals infected per day.
- rec is the recovery rate, so rec.I represents the number of individuals recovering per day. 
- madd is the mortality rate, so madd.I represents the number of individuals dying from the disease per day.
- loss is the rate of immunity loss, so loss.R represents the number of individuals losing immunity per day.

To make it easier to relate the parameters to reality, it is useful to calculate the values of 1/rec and 1/loss, which are respectively the duration of the infectious period and the duration of immunity in days.

```{r}
#Initialization of parameters related to epidemic dynamics

# Pathogen parameters  
trans = 0.2;
rec = 1/10;	# Infectious period lasts 10 days
loss = 1/40; # immunity lasts 40 days
madd = 0.05; # 5% chance of dying per infected day

```

For the time being, the following system of differential equations can be solved to track the evolution of the compartments S, I and R over time. But we're going to complexify the model to make it more realistic, and carry out discrete-time tracking using a matrix to store population evolution.

$$\begin{aligned}& \frac{d S}{d t}= - trans \cdot S \cdot \frac{I}{N} + loss \cdot R  \\
& \frac{d I}{d t}= - madd \cdot I + trans \cdot S \cdot \frac{I}{N} - rec \cdot I \\
& \frac{d R}{d t}= rec \cdot I - loss \cdot R
\end{aligned}$$

2. Taking population dynamics and structure into account


This model takes no account of population dynamics or structure. To make it more realistic, we will therefore separate the population into two categories: juvenile (j) and adult (a), each with an associated mortality rate (m1 = and m2 =). In addition, adult females (sex ratio sr =) can reproduce with a daily reproduction rate f = and give birth to ? young at a time (portee =). It's important to note that the young are always born healthy. 
The young grow to adulthood with a rate t = , i.e. a duration of 1/t = days corresponding to the time spent as a youngster.
In order to avoid the case of exponential population growth, we take into account K the capacity of the environment, which will allow us to adjust the number of births in the model by decreasing it as the total population approaches K.  

```{r}
# Initialization of population dynamics parameters

# Population parameters
K = 50;		    
sr = 0.5;	    
m1 = 0.0008;	    
m2 = 0.0003; #They live about 13 years	    
f = 0.006;	
portee = 7; #	
t1 = 1/365;	# Females mature at one year old    
	    
```


These population dynamics can also be expressed in the form of differential equations. 

$$\begin{aligned}& N = j + a \\
& \frac{d j}{d t}= -m_1 \cdot j + sr \cdot portee \cdot f \cdot a - t_1 \cdot j  \\
& \frac{d a}{d t}= t_1 \cdot j - m_2 \cdot a \
\end{aligned}$$


By combining population dynamics and epidemiological dynamics,
we end up with a much more complex model:

![The whole model](C:/Users\thill\Documents\M2 MODE\git\branche_Jeanne\MODE_reproduciblescience\.quarto\_freeze\Matrix\Schema_complet.png "The whole model" )

This model can also be expressed as a system of differential equations:

$$\begin{aligned}& \frac{d S_j}{d t}=-S_j \cdot(m_1+t_1+trans\cdot \frac{I}{N})+loss\cdot R_j + sr\cdot portee\cdot N_a\cdot f \cdot (1- \frac{N}{K}) \\
& \frac{d I_j}{d t}=-I_j \cdot (m_1+madd+t_1+rec)+trans\cdot \frac{I}{N} \cdot S_j  \\
& \frac{d R_j}{d t}= -R_j*(m_1+t_1+loss) + rec*I_j
\end{aligned}$$


$$\begin{aligned}& \frac{d S_a}{d t}=S_j \cdot t_1 - S_a \cdot (m_2+trans \cdot \frac{I}{N}) + loss \cdot R_a \\
& \frac{d I_a}{d t}=I_j \cdot t_1 - I_a \cdot (m_2+madd+rec)+trans \cdot S_a \cdot \frac{I}{N}  \\
& \frac{d R_a}{d t}= R_j \cdot t_1 - R_a \cdot (m_2+loss) + rec \cdot I_a 
\end{aligned}$$

However, instead of trying to solve this system in continuous time, we'll work in discrete time, using a matrix to track meerkat population numbers.


3. Setting up the model in R

The first step is to create the matrix that will store the population numbers over time. We will therefore create a matrix in 3 dimensions: - The first dimension (rows) corresponds to the structure of the population into juveniles and adults, with an additional row for the total population.
- The second dimension (columns) corresponds to the different states of the individuals (S, I and R).
- The third dimension is the simulation time in days.

Our matrix allows us to store in a single object, the state of the population in the form of a row/column matrix for each day of the simulation.

MATRIX REMINDER: In R, objects created with matrix() are two-dimensional. To work with matrices of more than 2 dimensions, use array(), which allows you to create n-dimensional arrays in R.

Matrix creation (MAT) in R. 

```{r} 
# Creation of a matrix of 0 with the right dimensions (3 rows, 3 columns, the number of days in the simulation)

temps = 4*365; #Simulation time = 4 years

MAT <- array(0, dim=c(3,3,temps)); 

```

At the very beginning of the epidemic, we imagine a single infectious adult arriving in a colony entirely susceptible to the disease, made up of 19 adults and 10 juveniles.

```{r}
# starting conditions 
MAT[1,1,1] <- 6;                  # number of healthy juveniles at initial conditions
MAT[2,1,1] <- 43;                 # number of healthy adults at initial conditions
MAT[2,2,1] <- 1;                  # number of sick adults at initial conditions
```

From these initial conditions, we can calculate the total population by health status. 

MATRIX REMINDER :

* Access a part of a matrix that is not a complete row or column:

To access several consecutive rows, simply replace the row number with an indication of the form : starting_row:ending_row. 

Here's an example of how to access only the first two rows of our matrix for the healthy state (first column) at t = 1 (initial conditions).

```{r}
MAT[1:2,1,1]
```

It works in the same way for columns and the time dimension:

```{r}
MAT[1,1:2,1] #Healthy and infected juveniles at starting conditions
MAT[1,1,1:5] #Healthy juveniles during the first 5 days (for the moment, the numbers are 0 after t=1 as the simulation has not yet been run).
```

* Access all rows, columns or time

To access all the rows in the matrix, you could use the method described above, but there's a better way: simply leave the row, column or time number blank. 
Here's an example with the rows:

```{r}
MAT[1:3,1,1] # Method seen above for accessing lines 1 to 3 for healthy state at initial conditions

MAT[,1,1] # New method
```

* Complexe example  

```{r}
MAT[1:2,,1:2] # Visualization of juvenile and adult numbers for all health conditions over the first two days.
```

* Summing a matrix

Summing the values contained in all or part of a matrix is very straightforward. Simply use the sum() function, setting as argument the matrix or the part of the matrix whose coefficients you wish to sum.

Example:
```{r}
sum(MAT[1:2,1,1])  # Sum of the number of healthy juveniles and adults at initial conditions 
```


Let's now apply this reminder to fill in the line corresponding to the total meerkat population by health status.

```{r}
# Population size by health status at initial conditions

MAT[3,1,1] <- sum(MAT[1:2,1,1]); #Total number of healthy meerkats 
MAT[3,2,1] <- sum(MAT[1:2,2,1]); #Total number of infectious meerkats
MAT[3,3,1] <- sum(MAT[1:2,3,1]); #Total number of immunized meerkats
```

Now that the initial conditions have been set, it's time to simulate the model. To do this, we simply convert the differential equations obtained in part two into discrete-time equations, which give :

$$\begin{aligned}& S_j[t+1]=S_j[t]-S_j[t] \cdot(m_1+t_1+trans\cdot \frac{I[t]}{N[t]})+loss\cdot R_j[t] + sr\cdot portee\cdot N_a[t]\cdot f \cdot (1- \frac{N[t]}{K}) \\
& I_j[t+1]=I_j[t]-I_j[t] \cdot (m_1+madd+t_1+rec)+trans\cdot \frac{I[t]}{N[t]} \cdot S_j[t]  \\
& R_j[t]= R_j[t]-R_j[t]*(m_1+t_1+loss) + rec*I_j[t]
\end{aligned}$$


$$\begin{aligned}& S_a[t+1]= S_a[t] + S_j[t] \cdot t_1 - S_a[t] \cdot (m_2+trans \cdot \frac{I[t]}{N[t]}) + loss \cdot R_a[t] \\
& I_a[t+1]=I_a[t] + I_j[t] \cdot t_1 - I_a[t] \cdot (m_2+madd+rec)+trans \cdot S_a[t] \cdot \frac{I[t]}{N[t]}  \\
& R_a[t+1]=R_a[t]+ R_j[t] \cdot t_1 - R_a[t] \cdot (m_2+loss) + rec \cdot I_a[t] 
\end{aligned}$$

Then, starting from the initial conditions, we simulate each time step in a loop. The simulation time here is 2 years.

```{r}
Nevo <- rep(0,temps) # Vector initialization to store total population over time
Nevo[1] <- sum(MAT[3,,1])

# SIMULATIONS
for (t in 1:(temps-1)){ 
  # For the juveniles 0-1 year (see equations above)
  # Note: births are positive, as newborns are in a healthy state.
  N <- sum(MAT[3,,t]); # size of total living population
 
  MAT[1,1,t+1] <- MAT[1,1,t]*(1-m1-t1-trans*MAT[3,2,t]/N) + loss*MAT[1,3,t] + max(0, sr*portee*(sum(MAT[2,,t])*f ) * (1 - N/K)); # Healthy juveniles the next day
  MAT[1,2,t+1] <- MAT[1,2,t]*(1-m1-madd-t1-rec) + trans*MAT[1,1,t]*MAT[3,2,t]/N; # Sick juveniles the next day
  MAT[1,3,t+1] <- MAT[1,3,t]*(1-m1-t1-loss) + rec*MAT[1,2,t]; # Immunized juveniles the next day

  # For the adult category 1-13 years (see equations above)
 
  MAT[2,1,t+1] <- MAT[2,1,t]*(1-m2-trans*MAT[3,2,t]/N) + MAT[1,1,t]*t1 + loss*MAT[2,3,t]; 
  MAT[2,2,t+1] <- MAT[2,2,t]*(1-m2-madd-rec) + MAT[1,2,t]*t1 + trans*MAT[2,1,t]*MAT[3,2,t]/N; 
  MAT[2,3,t+1] <- MAT[2,3,t]*(1-m2-loss) + MAT[1,3,t]*t1 + rec*MAT[2,2,t];
  
  # Calculation of population numbers by state of health
  MAT[3,1,t+1] <- sum(MAT[1:2,1,t+1]);
  MAT[3,2,t+1] <- sum(MAT[1:2,2,t+1]);
  MAT[3,3,t+1] <- sum(MAT[1:2,3,t+1]);              
 
  
  Nevo[t+1] <- sum(MAT[3,,t+1])
  
}# fin boucle temps
```

4. Visualizing results

Now that the simulation is done, it's easy to visualize the evolution of meerkat numbers by health status over time.

Here's a code to do just that:
```{r}
#Conversion of total numbers by health status over time into dataframes

Effectifs_sains<-as.data.frame(MAT[3,1,])        # Healthy
Effectifs_infectieux<-as.data.frame(MAT[3,2,])   # Infectious
Effectifs_immunises<-as.data.frame(MAT[3,3,])    # Immunized

# Putting it in the form of a single dataframe
Effectifs<-cbind(Effectifs_sains,Effectifs_infectieux,Effectifs_immunises)

# Graphic
library(ggplot2)
Effectifsplot <- ggplot(Effectifs,aes(x=seq(1,temps,1))) +
  geom_line(aes(y=Effectifs[,1]),color="blue") +    
  geom_line(aes(y=Effectifs[,2]),color="darkred") + 
  geom_line(aes(y=Effectifs[,3]),color="darkgreen" ) + 
  geom_line(aes(y=Nevo),color="black") +
  labs(title="Epidemic dynamics",x="Time (Days)",y="Number of S (blue), I (red), R (green) and N (black)")

Effectifsplot  
```

An endemic equilibrium is reached with a stable percentage of each health state over time. If you want to have fun with this model, you can change the parameters of the epidemic dynamics to observe other scenarios, such as the extinction of the population or the extinction of the disease.



IV. Chaînes de Markov -> Quentin
