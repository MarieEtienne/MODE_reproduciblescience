---
title: "Modèle matrice et applications en écologie"
execute: 
  freeze: auto
output: 
  html_document:
   toc: true
   toc_float: true
---

Plan projet : 

I. Modélisation matricielle en écologie -> Laurane
A quoi servent les matrices en écologie ?
Transformer une population en matrice
Modifier une matrice de population (addition de population,soustraction)

II. Les grands exemples de matrices en écologie  -> Alex
Classes d’âge et reproduction : Matrice de Leslie
Impact prédateur
Compétition ?

III. Matrice en épidémiologie -> Jeanne

1. Introduction to epidemiology with the SIRS model


Epidemiology is the study of disease dynamics within a population.
Let's imagine that a sick meerkat arrives in a new, healthy colony after having had to leave its previous colony, which has been decimated by disease. The dynamics of the epidemic can be modeled using a basic epidemiological model, the SIRS model.

![The SIRS model](C:/Users\thill\Documents\M2 MODE\git\branche_Jeanne\MODE_reproduciblescience\.quarto\_freeze\Matrix\Schema_modele_SIRS.png "The SIRS model" )

In this model, susceptible individuals (S) become infected, and thus pass into the infectious class (I), then either leave the system by dying of the disease, or heal, and thus become cured/immune individuals (R). Finally, immunized individuals can lose their immunity and become susceptible again (S).

- trans is the transmission rate, so trans.S.I/N represents the number of individuals infected per day.
- rec is the recovery rate, so rec.I represents the number of individuals recovering per day. 
- madd is the mortality rate, so madd.I represents the number of individuals dying from the disease per day.
- loss is the rate of immunity loss, so loss.R represents the number of individuals losing immunity per day.

To make it easier to relate the parameters to reality, it is useful to calculate the values of 1/rec and 1/loss, which are respectively the duration of the infectious period and the duration of immunity in days.

```{r}
#Initialization of parameters related to epidemic dynamics

# Pathogen parameters  
trans = 0.2;
rec = 1/10;	# Infectious period lasts 10 days
loss = 1/40; # immunity lasts 40 days
madd = 0.05; # 5% chance of dying per infected day

```

For the time being, the following system of differential equations can be solved to track the evolution of the compartments S, I and R over time. But we're going to complexify the model to make it more realistic, and carry out discrete-time tracking using a matrix to store population evolution.

$$\begin{aligned}& \frac{d S}{d t}= - trans \cdot S \cdot \frac{I}{N} + loss \cdot R  \\
& \frac{d I}{d t}= - madd \cdot I + trans \cdot S \cdot \frac{I}{N} - rec \cdot I \\
& \frac{d R}{d t}= rec \cdot I - loss \cdot R
\end{aligned}$$

2. Taking population dynamics and structure into account


This model takes no account of population dynamics or structure. To make it more realistic, we will therefore separate the population into two categories: juvenile (j) and adult (a), each with an associated mortality rate (m1 = and m2 =). In addition, adult females (sex ratio sr =) can reproduce with a daily reproduction rate f = and give birth to ? young at a time (portee =). It's important to note that the young are always born healthy. 
The young grow to adulthood with a rate t = , i.e. a duration of 1/t = days corresponding to the time spent as a youngster.
In order to avoid the case of exponential population growth, we take into account K the capacity of the environment, which will allow us to adjust the number of births in the model by decreasing it as the total population approaches K.  

```{r}
# Initialization of population dynamics parameters

# Population parameters
K = 50;		    
sr = 0.5;	    
m1 = 0.0008;	    
m2 = 0.0003; #They live about 13 years	    
f = 0.006;	
portee = 7; #	
t1 = 1/365;	# Females mature at one year old    
	    
```


These population dynamics can also be expressed in the form of differential equations. 

$$\begin{aligned}& N = j + a \\
& \frac{d j}{d t}= -m_1 \cdot j + sr \cdot portee \cdot f \cdot a - t_1 \cdot j  \\
& \frac{d a}{d t}= t_1 \cdot j - m_2 \cdot a \
\end{aligned}$$


By combining population dynamics and epidemiological dynamics,
we end up with a much more complex model:

![The whole model](C:/Users\thill\Documents\M2 MODE\git\branche_Jeanne\MODE_reproduciblescience\.quarto\_freeze\Matrix\Schema_complet.png "The whole model" )

This model can also be expressed as a system of differential equations:

$$\begin{aligned}& \frac{d S_j}{d t}=-S_j \cdot(m_1+t_1+trans\cdot \frac{I}{N})+loss\cdot R_j + sr\cdot portee\cdot N_a\cdot f \cdot (1- \frac{N}{K}) \\
& \frac{d I_j}{d t}=-I_j \cdot (m_1+madd+t_1+rec)+trans\cdot \frac{I}{N} \cdot S_j  \\
& \frac{d R_j}{d t}= -R_j*(m_1+t_1+loss) + rec*I_j
\end{aligned}$$


$$\begin{aligned}& \frac{d S_a}{d t}=S_j \cdot t_1 - S_a \cdot (m_2+trans \cdot \frac{I}{N}) + loss \cdot R_a \\
& \frac{d I_a}{d t}=I_j \cdot t_1 - I_a \cdot (m_2+madd+rec)+trans \cdot S_a \cdot \frac{I}{N}  \\
& \frac{d R_a}{d t}= R_j \cdot t_1 - R_a \cdot (m_2+loss) + rec \cdot I_a 
\end{aligned}$$

However, instead of trying to solve this system in continuous time, we'll work in discrete time, using a matrix to track meerkat population numbers.


3. Setting up the model in R

The first step is to create the matrix that will store the population numbers over time. We will therefore create a matrix in 3 dimensions: - The first dimension (rows) corresponds to the structure of the population into juveniles and adults, with an additional row for the total population.
- The second dimension (columns) corresponds to the different states of the individuals (S, I and R).
- The third dimension is the simulation time in days.

Our matrix allows us to store in a single object, the state of the population in the form of a row/column matrix for each day of the simulation.

MATRIX REMINDER: In R, objects created with matrix() are two-dimensional. To work with matrices of more than 2 dimensions, use array(), which allows you to create n-dimensional arrays in R.

Matrix creation (MAT) in R. 

```{r} 
# Creation of a matrix of 0 with the right dimensions (3 rows, 3 columns, the number of days in the simulation)

temps = 4*365; #Simulation time = 4 years

MAT <- array(0, dim=c(3,3,temps)); 

```

At the very beginning of the epidemic, we imagine a single infectious adult arriving in a colony entirely susceptible to the disease, made up of 19 adults and 10 juveniles.

```{r}
# starting conditions 
MAT[1,1,1] <- 6;                  # number of healthy juveniles at initial conditions
MAT[2,1,1] <- 43;                 # number of healthy adults at initial conditions
MAT[2,2,1] <- 1;                  # number of sick adults at initial conditions
```

From these initial conditions, we can calculate the total population by health status. 

MATRIX REMINDER :

* Access a part of a matrix that is not a complete row or column:

To access several consecutive rows, simply replace the row number with an indication of the form : starting_row:ending_row. 

Here's an example of how to access only the first two rows of our matrix for the healthy state (first column) at t = 1 (initial conditions).

```{r}
MAT[1:2,1,1]
```

It works in the same way for columns and the time dimension:

```{r}
MAT[1,1:2,1] #Healthy and infected juveniles at starting conditions
MAT[1,1,1:5] #Healthy juveniles during the first 5 days (for the moment, the numbers are 0 after t=1 as the simulation has not yet been run).
```

* Access all rows, columns or time

To access all the rows in the matrix, you could use the method described above, but there's a better way: simply leave the row, column or time number blank. 
Here's an example with the rows:

```{r}
MAT[1:3,1,1] # Method seen above for accessing lines 1 to 3 for healthy state at initial conditions

MAT[,1,1] # New method
```

* Complexe example  

```{r}
MAT[1:2,,1:2] # Visualization of juvenile and adult numbers for all health conditions over the first two days.
```

* Summing a matrix

Summing the values contained in all or part of a matrix is very straightforward. Simply use the sum() function, setting as argument the matrix or the part of the matrix whose coefficients you wish to sum.

Example:
```{r}
sum(MAT[1:2,1,1])  # Sum of the number of healthy juveniles and adults at initial conditions 
```


Let's now apply this reminder to fill in the line corresponding to the total meerkat population by health status.

```{r}
# Population size by health status at initial conditions

MAT[3,1,1] <- sum(MAT[1:2,1,1]); #Total number of healthy meerkats 
MAT[3,2,1] <- sum(MAT[1:2,2,1]); #Total number of infectious meerkats
MAT[3,3,1] <- sum(MAT[1:2,3,1]); #Total number of immunized meerkats
```

Now that the initial conditions have been set, it's time to simulate the model. To do this, we simply convert the differential equations obtained in part two into discrete-time equations, which give :

$$\begin{aligned}& S_j[t+1]=S_j[t]-S_j[t] \cdot(m_1+t_1+trans\cdot \frac{I[t]}{N[t]})+loss\cdot R_j[t] + sr\cdot portee\cdot N_a[t]\cdot f \cdot (1- \frac{N[t]}{K}) \\
& I_j[t+1]=I_j[t]-I_j[t] \cdot (m_1+madd+t_1+rec)+trans\cdot \frac{I[t]}{N[t]} \cdot S_j[t]  \\
& R_j[t]= R_j[t]-R_j[t]*(m_1+t_1+loss) + rec*I_j[t]
\end{aligned}$$


$$\begin{aligned}& S_a[t+1]= S_a[t] + S_j[t] \cdot t_1 - S_a[t] \cdot (m_2+trans \cdot \frac{I[t]}{N[t]}) + loss \cdot R_a[t] \\
& I_a[t+1]=I_a[t] + I_j[t] \cdot t_1 - I_a[t] \cdot (m_2+madd+rec)+trans \cdot S_a[t] \cdot \frac{I[t]}{N[t]}  \\
& R_a[t+1]=R_a[t]+ R_j[t] \cdot t_1 - R_a[t] \cdot (m_2+loss) + rec \cdot I_a[t] 
\end{aligned}$$

Then, starting from the initial conditions, we simulate each time step in a loop. The simulation time here is 2 years.

```{r}
Nevo <- rep(0,temps) # Vector initialization to store total population over time
Nevo[1] <- sum(MAT[3,,1])

# SIMULATIONS
for (t in 1:(temps-1)){ 
  # For the juveniles 0-1 year (see equations above)
  # Note: births are positive, as newborns are in a healthy state.
  N <- sum(MAT[3,,t]); # size of total living population
 
  MAT[1,1,t+1] <- MAT[1,1,t]*(1-m1-t1-trans*MAT[3,2,t]/N) + loss*MAT[1,3,t] + max(0, sr*portee*(sum(MAT[2,,t])*f ) * (1 - N/K)); # Healthy juveniles the next day
  MAT[1,2,t+1] <- MAT[1,2,t]*(1-m1-madd-t1-rec) + trans*MAT[1,1,t]*MAT[3,2,t]/N; # Sick juveniles the next day
  MAT[1,3,t+1] <- MAT[1,3,t]*(1-m1-t1-loss) + rec*MAT[1,2,t]; # Immunized juveniles the next day

  # For the adult category 1-13 years (see equations above)
 
  MAT[2,1,t+1] <- MAT[2,1,t]*(1-m2-trans*MAT[3,2,t]/N) + MAT[1,1,t]*t1 + loss*MAT[2,3,t]; 
  MAT[2,2,t+1] <- MAT[2,2,t]*(1-m2-madd-rec) + MAT[1,2,t]*t1 + trans*MAT[2,1,t]*MAT[3,2,t]/N; 
  MAT[2,3,t+1] <- MAT[2,3,t]*(1-m2-loss) + MAT[1,3,t]*t1 + rec*MAT[2,2,t];
  
  # Calculation of population numbers by state of health
  MAT[3,1,t+1] <- sum(MAT[1:2,1,t+1]);
  MAT[3,2,t+1] <- sum(MAT[1:2,2,t+1]);
  MAT[3,3,t+1] <- sum(MAT[1:2,3,t+1]);              
 
  
  Nevo[t+1] <- sum(MAT[3,,t+1])
  
}# fin boucle temps
```

4. Visualizing results

Now that the simulation is done, it's easy to visualize the evolution of meerkat numbers by health status over time.

Here's a code to do just that:
```{r}
#Conversion of total numbers by health status over time into dataframes

Effectifs_sains<-as.data.frame(MAT[3,1,])        # Healthy
Effectifs_infectieux<-as.data.frame(MAT[3,2,])   # Infectious
Effectifs_immunises<-as.data.frame(MAT[3,3,])    # Immunized

# Putting it in the form of a single dataframe
Effectifs<-cbind(Effectifs_sains,Effectifs_infectieux,Effectifs_immunises)

# Graphic
library(ggplot2)
Effectifsplot <- ggplot(Effectifs,aes(x=seq(1,temps,1))) +
  geom_line(aes(y=Effectifs[,1]),color="blue") +    
  geom_line(aes(y=Effectifs[,2]),color="darkred") + 
  geom_line(aes(y=Effectifs[,3]),color="darkgreen" ) + 
  geom_line(aes(y=Nevo),color="black") +
  labs(title="Epidemic dynamics",x="Time (Days)",y="Number of S (blue), I (red), R (green) and N (black)")

Effectifsplot  
```

An endemic equilibrium is reached with a stable percentage of each health state over time. If you want to have fun with this model, you can change the parameters of the epidemic dynamics to observe other scenarios, such as the extinction of the population or the extinction of the disease.



IV. Chaînes de Markov -> Quentin
